@page "/"

@using BlazorLeafletInterop.Components
@using BlazorLeafletInterop.Components.Base
@using BlazorLeafletInterop.Components.Layers.Raster
@using BlazorLeafletInterop.Interops
@using BlazorLeafletInterop.Models
@using BlazorLeafletInterop.Models.Basics
@using BlazorLeafletInterop.Models.Options.Basic
@using BlazorLeafletInterop.Models.Options.Map

<Map @ref="Map" Class="map" MapOptions="Options">
	<TileLayer @ref="TileLayer" UrlTemplate="https://tile.openstreetmap.org/{z}/{x}/{y}.png" />
	@if (IsFirstMarker)
	{
		<Marker Icon="IconRef" LatLng="new LatLng(50, 8.9)">
			<Popup>
				First Marker Popup Content
			</Popup>
			<Tooltip>
				Second Marker Tooltip Content
			</Tooltip>
		</Marker>
	}
	else
	{
		<Marker Icon="IconRef" LatLng="new LatLng(50, 9)">
			<Popup>
				Testing Popup Content
			</Popup>
			<Tooltip>
				Testing Tooltip Content
			</Tooltip>
		</Marker>
	}
</Map>
<div style="position: absolute; top: 5%; left: 5%; z-index: 10000; background-color: aquamarine; padding: 10px; border-radius: 10px;">
	<h3>Blazor Leaflet Interop</h3>
	<button @onclick="SwitchMarkers">Switch Markers</button>
</div>

@code {
	[Inject]
	public IIconFactoryInterop IconFactoryInterop { get; set; } = default!;
	
    private Map? Map { get; set; }
    private TileLayer? TileLayer { get; set; }
    private MapOptions Options { get; set; } = new() { PreferCanvas = true, Center = new LatLng(50, 9), Zoom = 13 };
	private IJSObjectReference IconRef { get; set; } = default!;
	private bool IsFirstMarker { get; set; } = true;

	protected override async Task OnInitializedAsync()
	{
		var options = new IconOptions()
		{
			IconUrl = "https://leafletjs.com/examples/custom-icons/leaf-green.png", 
			IconSize = new Point(38, 95), 
			IconAnchor = new Point(22, 94), 
			PopupAnchor = new Point(-3, -76), 
			ShadowUrl = "https://leafletjs.com/examples/custom-icons/leaf-shadow.png", 
			ShadowSize = new Point(50, 64), 
			ShadowAnchor = new Point(4, 62), 
			ClassName = "my-div-icon"
		};
		IconRef = await IconFactoryInterop.CreateIcon(options);
	}

	private void SwitchMarkers()
	{
		IsFirstMarker = !IsFirstMarker;
		StateHasChanged();
	}
}