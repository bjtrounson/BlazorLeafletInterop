@page "/"

@using BlazorLeafletInterop.Components
@using BlazorLeafletInterop.Components.Layers.Raster
@using BlazorLeafletInterop.Components.Layers.Vector
@using BlazorLeafletInterop.Components.Controls
@using BlazorLeafletInterop.Plugins.Leaflet.MiniMap.Components
@using BlazorLeafletInterop.Models.Basics
@using BlazorLeafletInterop.Components.Layers.UI
@using BlazorLeafletInterop.Factories
@using BlazorLeafletInterop.Models.Options.Layer.Raster
@using BlazorLeafletInterop.Models.Options.Map

<Map @ref="Map" Class="map" MapOptions="Options" AfterRender="AfterRender">
	<TileLayer UrlTemplate="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"/>
	<ControlZoom/>
	<ControlScale/>
	<LeafletMiniMap TileRef="MiniMapTileLayer"/>
	@if (IsFirstMarker)
	{
		<Marker @ref="Marker" LatLng="new LatLng(50, 8.9)">
			<Popup>
				First Marker Popup Content
			</Popup>
			<Tooltip>
				Second Marker Tooltip Content
			</Tooltip>
		</Marker>
	}
	else
	{
		<Marker LatLng="new LatLng(50, 9)">
			<Popup>
				Testing Popup Content
			</Popup>
			<Tooltip>
				Testing Tooltip Content
			</Tooltip>
		</Marker>
	}
</Map>
<div style="position: absolute; top: 5%; left: 5%; z-index: 10000; background-color: aquamarine; padding: 10px; border-radius: 10px;">
	<h3>Blazor Leaflet Interop</h3>
	<button @onclick="SwitchMarkers">Switch Markers</button>
	<button @onclick="FitToBoundsTest">Fit To Bounds Test</button>
</div>

@code {
	[Inject]
	public IIconFactory IconFactoryInterop { get; set; } = default!;
	
	[Inject]
	public ILayerFactory LayerFactory { get; set; } = default!;
	
    private Map? Map { get; set; }
	private IJSObjectReference? MiniMapTileLayer { get; set; }
    private MapOptions Options { get; set; } = new() { PreferCanvas = true, Center = new LatLng(50, 9), Zoom = 13 };
	private Dictionary<string, IJSObjectReference> OverlayLayers { get; set; } = new();
	private bool IsFirstMarker { get; set; } = true;
	private Polyline? Polyline { get; set; }
	private Marker? Marker { get; set; } = default!;

	protected override async Task OnInitializedAsync()
	{
		MiniMapTileLayer = await LayerFactory.CreateTileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", new TileLayerOptions());
		await base.OnInitializedAsync();
	}

	private async void AfterRender()
	{
		Polyline = new Polyline();
		if (Map is null) return;
		await Polyline.Initialize(LayerFactory, Map);
		await Polyline.SetLatLngs(new List<LatLng>() { new LatLng(50, 8.9), new LatLng(50, 9) });
		await Polyline.AddTo<Polyline>(Map.MapRef, Polyline.PolylineRef);
		if (Polyline.PolylineRef is not null) OverlayLayers.Add("Polyline", Polyline.PolylineRef);
		if (Marker is null) return;
		var markerLatLng = await Marker.GetLatLng();
		Console.WriteLine(markerLatLng?.Lat + " " + markerLatLng?.Lng);
	}

	private void SwitchMarkers()
	{
		IsFirstMarker = !IsFirstMarker;
		StateHasChanged();
	}
	
	private async void FitToBoundsTest()
	{
		if (Map is null) return;
		await Map.FitBounds(new LatLngBounds(new LatLng(-44.079625, 171.650432), new LatLng(-43.53835, 172.56842)), null);
	}
}