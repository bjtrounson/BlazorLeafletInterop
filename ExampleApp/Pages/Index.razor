@page "/"

@using BlazorLeafletInterop.Components
@using BlazorLeafletInterop.Components.Base
@using BlazorLeafletInterop.Models
@using BlazorLeafletInterop.Models.Basics
@using GeoJSON.Net.Feature
@using Newtonsoft.Json

@inject HttpClient HttpClient

<Map @ref="Map" MapOptions="Options">
	<TileLayer @ref="TileLayer" UrlTemplate="https://tile.openstreetmap.org/{z}/{x}/{y}.png" />
	<GeoJson GeoJsonData="GeoJsonData">
		<Marker Icon="IconRef" LatLng="new LatLng(50, 9)">
        	<Popup>
        		Testing Popup Content
        	</Popup>
        	<Tooltip>
        		Testing Tooltip Content
        	</Tooltip>
        </Marker>	
	</GeoJson>
</Map>

@code {
    private Map? Map { get; set; }
    private TileLayer? TileLayer { get; set; }
    private MapOptions Options { get; set; } = new() { Center = new LatLng(50, 9), Zoom = 13 };
	private Icon? IconRef { get; set; }
	private FeatureCollection? GeoJsonData { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var options = new IconOptions()
		{
			IconUrl = "https://leafletjs.com/examples/custom-icons/leaf-green.png", 
			IconSize = new Point(38, 95), 
			IconAnchor = new Point(22, 94), 
			PopupAnchor = new Point(-3, -76), 
			ShadowUrl = "https://leafletjs.com/examples/custom-icons/leaf-shadow.png", 
			ShadowSize = new Point(50, 64), 
			ShadowAnchor = new Point(4, 62), 
			ClassName = "my-div-icon"
		};
		IconRef = new Icon(options);

		var res = await HttpClient.GetAsync("https://gist.githubusercontent.com/wavded/1200773/raw/e122cf709898c09758aecfef349964a8d73a83f3/sample.json");
		var json = await res.Content.ReadAsStringAsync();
		GeoJsonData = JsonConvert.DeserializeObject<FeatureCollection>(json);
	}

}