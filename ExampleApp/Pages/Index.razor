@page "/"

@using BlazorLeafletInterop.Components
@using BlazorLeafletInterop.Components.Layers.Raster
@using BlazorLeafletInterop.Components.Layers.Vector
@using BlazorLeafletInterop.Interops
@using BlazorLeafletInterop.Models.Basics
@using BlazorLeafletInterop.Components.Layers.UI
@using BlazorLeafletInterop.Models.Options.Map

<Map @ref="Map" Class="map" MapOptions="Options" AfterRender="@(() => AfterRender())">
	<TileLayer @ref="TileLayer" UrlTemplate="https://tile.openstreetmap.org/{z}/{x}/{y}.png" />
	@if (IsFirstMarker)
	{
		<Marker @ref="Marker" LatLng="new LatLng(50, 8.9)">
			<Popup>
				First Marker Popup Content
			</Popup>
			<Tooltip>
				Second Marker Tooltip Content
			</Tooltip>
		</Marker>
	}
	else
	{
		<Marker LatLng="new LatLng(50, 9)">
			<Popup>
				Testing Popup Content
			</Popup>
			<Tooltip>
				Testing Tooltip Content
			</Tooltip>
		</Marker>
	}
</Map>
<div style="position: absolute; top: 5%; left: 5%; z-index: 10000; background-color: aquamarine; padding: 10px; border-radius: 10px;">
	<h3>Blazor Leaflet Interop</h3>
	<button @onclick="SwitchMarkers">Switch Markers</button>
	<button @onclick="FitToBoundsTest">Fit To Bounds Test</button>
</div>

@code {
	[Inject]
	public IIconFactoryInterop IconFactoryInterop { get; set; } = default!;
	
	[Inject]
	public IBundleInterop BundleInterop { get; set; } = default!;
	
    private Map? Map { get; set; }
    private TileLayer? TileLayer { get; set; }
    private MapOptions Options { get; set; } = new() { PreferCanvas = true, Center = new LatLng(50, 9), Zoom = 13 };
	private bool IsFirstMarker { get; set; } = true;
	private Polyline? Polyline { get; set; }
	private Marker Marker { get; set; } = default!;
	
	private async Task AfterRender()
	{
		Polyline = new Polyline();
		if (Map is null) return;
		await Polyline.Init(BundleInterop, Map.MapRef);
		await Polyline.SetLatLngs(new List<LatLng>() { new LatLng(50, 8.9), new LatLng(50, 9) });
		await Polyline.AddTo<Polyline>(Map.MapRef, Polyline.PolylineRef);
	}

	private void SwitchMarkers()
	{
		IsFirstMarker = !IsFirstMarker;
		StateHasChanged();
	}
	
	private async void FitToBoundsTest()
	{
		if (Map is null) return;
		await Map.FitBounds(new LatLngBounds(new LatLng(-44.079625, 171.650432), new LatLng(-43.53835, 172.56842)), null);
	}
}