@page "/LargeMarkerTest"

@using BlazorLeafletInterop.Components;
@using BlazorLeafletInterop.Components.Layers.Raster
@using BlazorLeafletInterop.Components.Layers.UI
@using BlazorLeafletInterop.Factories
@using BlazorLeafletInterop.Models.Basics;
@using BlazorLeafletInterop.Models.Options.Basic
@using BlazorLeafletInterop.Models.Options.Layer.UI
@using BlazorLeafletInterop.Models.Options.Map

@inject IIconFactory IconFactory

<Map @ref="_map" Class="map" MapOptions="_options">
	<TileLayer UrlTemplate="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"/>
	@* Create a large amount of markers with random positions *@
	@for (var i = 0; i < 500; i++)
	{
		<Marker Icon="_icon" LatLng="@GetRandomLatLng()"/>
	}
</Map>

@code {
	private Map? _map;
	private readonly MapOptions _options = new() {  Center = new LatLng(0, 0), Zoom = 1 };

	private IJSObjectReference? _icon;

	protected override async Task OnInitializedAsync()
    {
		_icon = await IconFactory.CreateDivIcon(new DivIconOptions
		{
			Html = "<div style=\"background-color: red; width: 38px; height: 95px;\"></div>",
			IconSize = new Point(38, 95),
			IconAnchor = new Point(22, 94),
			PopupAnchor = new Point(-3, -76),
		});
	}
	
	private LatLng GetRandomLatLng()
	{
		var random = new Random();
		var lat = random.NextDouble() * 180 - 90;
		var lng = random.NextDouble() * 360 - 180;
		return new LatLng(lat, lng);
	}
}